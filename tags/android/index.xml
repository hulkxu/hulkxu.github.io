<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Android on SENSITIVEHULK.COM</title>
    <link>http://sensitivehulk.com/tags/android/</link>
    <description>Recent content in Android on SENSITIVEHULK.COM</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Fri, 13 May 2016 15:35:50 +0800</lastBuildDate>
    <atom:link href="http://sensitivehulk.com/tags/android/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Android的闪光灯解决方案（Android M）</title>
      <link>http://sensitivehulk.com/post/golang/androidM_flashlight_solution/</link>
      <pubDate>Fri, 13 May 2016 15:35:50 +0800</pubDate>
      
      <guid>http://sensitivehulk.com/post/golang/androidM_flashlight_solution/</guid>
      <description>

&lt;p&gt;&lt;strong&gt;在Android中，一直没有标准的闪光灯接口。在Android M之前，手电筒应用打开闪光灯都是通过打开Camera设备来实现的，这样与Camera相关应用是有冲突的。在Android M中，新增了CameraManager的setTorchMode方法来直接打开闪光灯模块，这样与其他使用Camera的应用没有冲突，但这种方式实际上还是会open cameras设备，对sensor上电，功耗还是比较大。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;一种比较简单的，快速的，功耗较低的方式是将闪光灯设备做成一个设备节点，通过读写该节点来打开关闭闪光灯，彻底与Camera区分开来，当然在两者在竞争该设备时，需要在framework里做好控制。&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;android-m上打开闪光灯的方式:01e72f00a80225a8db4feb884357235d&#34;&gt;Android M上打开闪光灯的方式&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;通过CameraManager的setTorchMode方法来直接打开闪光灯模块。与camera模块没有冲突，在后台打开手电筒打开闪光灯的情况下进入Camera应用后也不会报错。以FlashlightController（frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/policy）为例。&lt;/li&gt;

&lt;li&gt;&lt;p&gt;首先需要注册TorchCallback回调：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mCameraManager.registerTorchCallback(mTorchCallback, mHandler);
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;打开关闭闪光灯：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public void setFlashlight(boolean enabled) {
    boolean pendingError = false;
    synchronized (this) {
        if (mFlashlightEnabled != enabled) {
            mFlashlightEnabled = enabled;
            try {
                mCameraManager.setTorchMode(mCameraId, enabled);
            } catch (CameraAccessException e) {
                Log.e(TAG, &amp;quot;Couldn&#39;t set torch mode&amp;quot;, e);
                mFlashlightEnabled = false;
                pendingError = true;
            }
        }
    }
    dispatchModeChanged(mFlashlightEnabled);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;设置结果通过回调通知：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private final CameraManager.TorchCallback mTorchCallback =
        new CameraManager.TorchCallback() {
    @Override
    public void onTorchModeUnavailable(String cameraId) {
        //不支持TorchMode
        if (TextUtils.equals(cameraId, mCameraId)) {
            setCameraAvailable(false);
        }
    }
    @Override
    public void onTorchModeChanged(String cameraId, boolean enabled) {
        if (TextUtils.equals(cameraId, mCameraId)) {
            //设置成功
            setCameraAvailable(true);
            setTorchMode(enabled);
        }
    }
};
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;settorchmode的调用过程:01e72f00a80225a8db4feb884357235d&#34;&gt;setTorchMode的调用过程&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;setTorchMode的调用过程如下图所示：
&lt;img src=&#34;http://sensitivehulk.com/media/settorchmode_flow.png&#34; alt=&#34;调用流程&#34; /&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;CameraDeviceClientFlashControl的setTorchMode方法如下。同样是open camera，设置flash mode为TORCH的方式，这与之前没什么区别，只是将这个过程放到Native层，使其与Camera使用避免冲突。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//……
res = connectCameraDevice(cameraId);
uint8_t torchOn = ANDROID_FLASH_MODE_TORCH;
mMetadata-&amp;gt;update(ANDROID_FLASH_MODE, &amp;amp;torchOn, 1);
//……
res = mDevice-&amp;gt;setStreamingRequest(*mMetadata);
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;android-m上实现闪光灯的节点模式:01e72f00a80225a8db4feb884357235d&#34;&gt;Android M上实现闪光灯的节点模式&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Android M上闪光灯的使用与Camera设备的使用冲突已经解决，所以这里直接在设备节点的操作放到Native层，替代之前的CameraDeviceClientFlashControl的工作即可，这比Android L上实现方便很多。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;设备节点的生成以及权限设置同AndroidL的方式&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;基于FlashControlBase 新建一个类FlashControlByDevNode。其setTorchMode方法如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;status_t FlashControlByDevNode::setTorchMode(
    const String8&amp;amp; cameraId, bool enabled) {


    if (enabled) {
        // pre-check：invalid camera?no flash unit?
        writeFlashDevNode(17);//Enable flash, 0x11
        mTorchEnabled = true;
        mCallbacks-&amp;gt;torch_mode_status_change(mCallbacks,
                cameraId.string(), TORCH_MODE_STATUS_AVAILABLE_ON);
        return OK;              
    } else {
        writeFlashDevNode(16);//Disable flash, 0x10
        mTorchEnabled = false;
        mCallbacks-&amp;gt;torch_mode_status_change(mCallbacks,
            cameraId.string(), TORCH_MODE_STATUS_AVAILABLE_OFF);
        return OK;
    }
}


status_t FlashControlByDevNode::writeFlashDevNode(int value)
{
    status_t ret = 0;
    const char *flash_dev_node = &amp;quot;/sys/class/flash_test/flash_test/flash_value&amp;quot;;
    char write_value[8] = {0};
    FILE *file = fopen(flash_dev_node, &amp;quot;rb+&amp;quot;);
    if (NULL != file) {
        sprintf(write_value, &amp;quot;0x%02x&amp;quot;, value);
        fseek(file, 0, 0);
        fwrite(write_value, strlen(write_value), 1, file);
        fclose(file);
    }
    return ret;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Android的闪光灯解决方案（Android L）</title>
      <link>http://sensitivehulk.com/post/golang/android_flashlight_solution/</link>
      <pubDate>Fri, 13 May 2016 14:35:50 +0800</pubDate>
      
      <guid>http://sensitivehulk.com/post/golang/android_flashlight_solution/</guid>
      <description>

&lt;p&gt;&lt;strong&gt;在Android中，一直没有标准的闪光灯接口。在Android M之前，手电筒应用打开闪光灯都是通过打开Camera设备来实现的，这样与Camera相关应用是有冲突的。在Android M中，新增了CameraManager的setTorchMode方法来直接打开闪光灯模块，这样与其他使用Camera的应用没有冲突，但这种方式实际上还是会open cameras设备，对sensor上电，功耗还是比较大。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;一种比较简单的，快速的，功耗较低的方式是将闪光灯设备做成一个设备节点，通过读写该节点来打开关闭闪光灯，彻底与Camera区分开来，当然在两者在竞争该设备时，需要在framework里做好控制。&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;android-l上打开闪光灯的方式:a4d4ce96910111937db23fc566e850cd&#34;&gt;Android L上打开闪光灯的方式&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;通过open Camera,并设置flash mode为TORCH来实现的，如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mCameraManager.openCamera(getCameraId(), mCameraListener, mHandler);
mCameraDevice.createCaptureSession(outputs, mSessionListener, mHandler);
CaptureRequest.Builder builder = mCameraDevice.createCaptureRequest(
             CameraDevice.TEMPLATE_PREVIEW);
builder.set(CaptureRequest.FLASH_MODE, CameraMetadata.FLASH_MODE_TORCH);
builder.addTarget(mSurface);
CaptureRequest request = builder.build();
mSession.capture(request, null, mHandler);
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;android-l实现闪光灯的节点模式:a4d4ce96910111937db23fc566e850cd&#34;&gt;Android L实现闪光灯的节点模式&lt;/h2&gt;

&lt;p&gt;将闪光灯改为节点模式后，打开关闭闪光灯与Camera就区分开来了，不会阻塞到其他Camera应用。但当其他camera打开camera时，我们要交出闪光灯的控制权，以免影响Camera的正常使用。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;首先将闪光灯设备做成设备节点&lt;/li&gt;

&lt;li&gt;&lt;p&gt;在init.rc里面设置节点权限，以方便读写&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;chown system system /sys/class/flash_test/flash_test/flash_value
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;在已有LightsService.java（frameworks/base/services/core/java/com/androidserver/lights）中完善flashlight服务：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private final IHardwareService.Stub mLegacyFlashlightHack = 
    new IHardwareService.Stub() {
    private static final String FLASHLIGHT_FILE =
     &amp;quot;/sys/class/flash_test/flash_test/flash_value&amp;quot;;
    public void setFlashlightEnabled(boolean on) {
        //check permission
        try {
            FileOutputStream fos = new FileOutputStream(FLASHLIGHT_FILE);
            byte[] bytes = new byte[5];
            bytes[0] = (byte)(&#39;0&#39;);
            bytes[1] = (byte)(&#39;x&#39;);
            bytes[2] = (byte)(on ? &#39;1&#39; : &#39;0&#39;);
            bytes[3] = (byte)(on ? &#39;1&#39; : &#39;0&#39;);
            bytes[4] = &#39;\n&#39;;
            fos.write(bytes);
            fos.close();
        } catch (Exception e) {
            // fail silently
            android.util.Log.v(&amp;quot;KKKK&amp;quot;, &amp;quot;setFlashlightEnabled, on exception &amp;quot; + e);
        }
    }
}
publishBinderService(&amp;quot;hardware&amp;quot;, mLegacyFlashlightHack);
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;新建一个FlashLightManager.java类用来操作该设备，处理与Camera使用闪光灯冲突的问题。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private FlashLightManager() {
    IBinder binder = (IBinder) ServiceManager.getService(&amp;quot;hardware&amp;quot;);
    mLocalhardwareservice = IHardwareService.Stub.asInterface(binder);
    mFlashLightOn = false;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;打开，关闭闪光灯后发送广播，让相应的应用处理。比如后台手电筒在打开的情况下进入Camera应用，需要关闭闪光灯，所以需要发送广播让手电筒更新UI显示。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public boolean setFlashlightEnabled(boolean isEnable) {
    if (isEnable) {
        mLocalhardwareservice.setFlashlightEnabled(isEnable);
    }
    mFlashLightOn = isEnable;
    if (!mFlashLightOn) {
        Intent intent = new Intent(Intent.ACTION_FLASHLIGHT_STATE_CHANGED);
        intent.addFlags(Intent.FLAG_RECEIVER_REPLACE_PENDING);
        intent.putExtra(Intent.EXTRA_FLASHLIGHT_STATE, mFlashLightOn);
        context.sendBroadcast(intent);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;要保证所有Camera应用进入时关闭闪光灯，需要在framework的Camera.java（frameworks/base/core/java/android/hardware/Camera.java）中构造函数里关闭闪光灯：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private Camera(int cameraId, int halVersion) {
    //……
    if (FlashLightManager.getInstance().getFlashlightEnabled()) {
        Log.d(TAG, &amp;quot;FlashLightManager is not use cameramode,will close Flashlight&amp;quot;);
        FlashLightManager.getInstance().setFlashlightEnabled(false);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Android获取图片缩略图导致libskia crash</title>
      <link>http://sensitivehulk.com/post/golang/android_libskia_crash/</link>
      <pubDate>Fri, 15 Aug 2014 16:57:54 +0800</pubDate>
      
      <guid>http://sensitivehulk.com/post/golang/android_libskia_crash/</guid>
      <description>

&lt;p&gt;最近项目中Camera2模块很多关于libskia库的native crash。Camera模块中用到libskia库的主要有图片解析（通过bitmap），获取缩略图（通过Images.Thumbnails.getThumbnail），从调用栈看与getThrumbnail相关。&lt;/p&gt;

&lt;h2 id=&#34;android的两种缩略图:8bb097f1e14e3d40ac6965d7d7aac5df&#34;&gt;Android的两种缩略图&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;MICRO_KIND（比较小，大小只有10000byte），直接将jpeg数据存储在一个可以randomAccess的文件上，randomAccessFile在存储路径下的
/DCIM/.thumbnails下的一个文件,见下面代码&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class MiniThumbFile {
    private String randomAccessFilePath(int version) {
        String directoryName = 
        Environment.getExternalStorageDirectory().toString()+ &amp;quot;/DCIM/.thumbnails&amp;quot;;
        return directoryName + &amp;quot;/.thumbdata&amp;quot; + version + &amp;quot;-&amp;quot; + mUri.hashCode();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;MINI_KIND （比较大，长宽不大于512 * 384），从图片EXIF或者直接decode原图得到。见ThumbnailUtils.createImageThumbnail方法。
同样存储在/DCIM/.thumbnails目录下。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://sensitivehulk.com/media/two_thumbnail.png&#34; alt=&#34;缩略图&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;MICRO_KIND 通过原图数据表中的MINI_THUMB_MAGIC字段来查询。MINI_KIND通过缩略图表来存储，通过id与原图关联。如下图&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://sensitivehulk.com/media/mircothumb_database.png&#34; alt=&#34;MICRO_KIND&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://sensitivehulk.com/media/minithumb_database.png&#34; alt=&#34;MINI_KIND&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;android生成图片缩略图的过程:8bb097f1e14e3d40ac6965d7d7aac5df&#34;&gt;Android生成图片缩略图的过程&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;首先MediaProvider插入图片到数据库时并不立即生成缩略图&lt;/li&gt;

&lt;li&gt;&lt;p&gt;当通过获取Images.Thumbnails.getThumbnail获取缩略图时，首先判断randomAccessFile是否已生成过缩略图。如果已生成缩略图，则直接查询。（MediaStore.java的Images.Thumbnails.getThumbnail方法）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;MiniThumbFile thumbFile = new MiniThumbFile(isVideo ? 
    Video.Media.EXTERNAL_CONTENT_URI: Images.Media.EXTERNAL_CONTENT_URI);
long magic = thumbFile.getMagic(origId);
if (magic != 0) {
    if (kind == MICRO_KIND) {
        synchronized (sThumbBufLock) {
        //get bitmap data from randomAcessFile
        if (thumbFile.getMiniThumbFromFile(origId, sThumbBuf) != null) {
            bitmap = BitmapFactory.decodeByteArray(sThumbBuf, 0, sThumbBuf.length);
        }
    }
    return bitmap;
    } else if (kind == MINI_KIND) {
        String column = isVideo ? &amp;quot;video_id=&amp;quot; : &amp;quot;image_id=&amp;quot;;
        //query thumbnail id
        c = cr.query(baseUri, PROJECTION, column + origId, null, null);
        if (c != null &amp;amp;&amp;amp; c.moveToFirst()) {
            // get bitmap from thumbnail jpeg file
            bitmap = getMiniThumbFromFile(c, baseUri, cr, options);
            if (bitmap != null) {
            return bitmap;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;这里baseUri为缩略图Uri:content://media/external/images/thumbnails&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;若未生成过缩略图，则需要先通过query查询操作来生成缩略图:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Uri blockingUri = baseUri.buildUpon().appendQueryParameter(&amp;quot;blocking&amp;quot;, &amp;quot;1&amp;quot;)
.appendQueryParameter(&amp;quot;orig_id&amp;quot;, String.valueOf(origId))
.appendQueryParameter(&amp;quot;group_id&amp;quot;, String.valueOf(groupId)).build();
c = cr.query(blockingUri, PROJECTION, null, null, null);
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;查询操作对应MediaProvider的queryThumbnail，waitForThumbnailReady方法。会首先查询原始图片的id,文件路径，然后生成MediaThumbRequest发送给thumbs thread执行。下面来看MediaThumbRequest的执行过程（MediaThumbRequest.java）;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;void execute() throws IOException {
    //.....
    Bitmap bitmap = null;
    if (mPath != null) {
        //这里mPath为原始图片路径，生成大jpeg缩略图
        bitmap = ThumbnailUtils.createImageThumbnail(mPath,
                    Images.Thumbnails.MINI_KIND);
        //这里是重点，先向数据库中插入记录，再保存数据到文件中！
        Uri uri = updateDatabase(bitmap);
        if (uri != null) {
            OutputStream thumbOut = mCr.openOutputStream(uri);
            bitmap.compress(Bitmap.CompressFormat.JPEG, 85, thumbOut);
            thumbOut.close();
        }
    }
    //接下来生成小缩略图，先将bitmap裁剪到合适大小
    bitmap = ThumbnailUtils.extractThumbnail(bitmap,
          ThumbnailUtils.TARGET_SIZE_MICRO_THUMBNAIL,
          ThumbnailUtils.TARGET_SIZE_MICRO_THUMBNAIL,
          ThumbnailUtils.OPTIONS_RECYCLE_INPUT);
    bitmap.compress(Bitmap.CompressFormat.JPEG, 75, miniOutStream);
    data = miniOutStream.toByteArray();
    magic = sRandom.nextLong();
    //将数据直接保存到randomAccessFile中，magic是地址
    miniThumbFile.saveMiniThumbToFile(data, mOrigId, magic);
    ContentValues values = new ContentValues();
    //然后将magic地址更新到原始图片的MINI_THUMB_MAGIC字段中
    values.put(ImageColumns.MINI_THUMB_MAGIC, magic);
    mCr.update(mUri, values, null, null);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;至此缩略图都已生成完毕。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;libjpeg-crash的原因:8bb097f1e14e3d40ac6965d7d7aac5df&#34;&gt;libjpeg crash的原因&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; signal 7 (SIGBUS), code 2 (BUS_ADRERR), fault addr 554ec000
#00  pc 00022058  /system/lib/libc.so (__memcpy_base+60)
#01  pc 000c6dc9  /system/lib/libskia.so (SkMemoryStream::read(void*, unsigned int)+28)
#02  pc 000f045d  /system/lib/libskia.so
#03  pc 0001c4e4  /system/lib/libjpeg.so (jpeg_fill_bit_buffer+108)
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;问题的根本原因是保存大缩略图时是先插入数据库数据，再保存实际文件数据。当有多个线程在同时调用Images.Thumbnails.getThumbnail方法时就会导致该问题，如下图：
&lt;img src=&#34;http://sensitivehulk.com/media/multi_task_getthumbnail.png&#34; alt=&#34;调用流程图&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;解决方案:8bb097f1e14e3d40ac6965d7d7aac5df&#34;&gt;解决方案&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Images.Thumbnails.getThumbnail的查询query接口加上保护锁。&lt;/li&gt;
&lt;li&gt;MediaThumbRequest 中先进行jpeg数据的保存再进行数据库的更新。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;第一种方案修改比较方便，最后修改如下，问题也解决，crash未再复现。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;--- a/core/java/android/provider/MediaStore.java
+++ b/core/java/android/provider/MediaStore.java
@@ -541,6 +541,7 @@ public final class MediaStore {
         private static final Object sThumbBufLock = new Object();
         private static byte[] sThumbBuf;

       + private static final Object sThumbLock = new Object();

@@ -645,7 +646,9 @@ public final class MediaStore {
           if (c != null) c.close();
       -   c = cr.query(blockingUri, PROJECTION, null, null, null);
       +   synchronized (sThumbLock) {
       +        c = cr.query(blockingUri, PROJECTION, null, null, null);
       +   }
           // This happens when original image/video doesn&#39;t exist.
           if (c == null) return null;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>