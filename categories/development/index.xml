<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Development on SENSITIVEHULK.COM</title>
    <link>https://hulkxu.github.io/categories/development/</link>
    <description>Recent content in Development on SENSITIVEHULK.COM</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Tue, 10 May 2016 14:35:50 +0800</lastBuildDate>
    <atom:link href="https://hulkxu.github.io/categories/development/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>golang的web交互</title>
      <link>https://hulkxu.github.io/post/golang/web_interactive/</link>
      <pubDate>Tue, 10 May 2016 14:35:50 +0800</pubDate>
      
      <guid>https://hulkxu.github.io/post/golang/web_interactive/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;工作中有一些重复工作需要在网页上操作,golang有很好的net相关操作库,可以满足需求。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;查看web的数据交互:6fd962745850b05113455789d534250f&#34;&gt;查看web的数据交互&lt;/h2&gt;

&lt;p&gt;若需要golang实现浏览器里的一些操作,如登录,查询等操作.需要详细的指导客户端与服务器详细的交互数据。chrome浏览器的开发者工具可以很详细的查看。&lt;/p&gt;

&lt;p&gt;比如网站的登录操作，可以查看到以下数据交换：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://hulkxu.github.io/media/login_info.png&#34; alt=&#34;登录信息&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://hulkxu.github.io/media/login_info2.png&#34; alt=&#34;登录信息&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;对应的golang代码为:6fd962745850b05113455789d534250f&#34;&gt;对应的golang代码为：&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;添加表单数据&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sendform := url.Values{}
sendform.Add(&amp;quot;action&amp;quot;, &amp;quot;ExecuteQuery&amp;quot;)
sendform.Add(&amp;quot;resourceId&amp;quot;, &amp;quot;cq.repo.cq-query:&amp;quot;+queryid+&amp;quot;@SPRDCSS/SPCSS&amp;quot;)
sendform.Add(&amp;quot;format&amp;quot;, &amp;quot;JSON&amp;quot;)
//sendform.Add(&amp;quot;rowCount&amp;quot;, &amp;quot;20&amp;quot;)
sendform.Add(&amp;quot;cquid&amp;quot;, cqUid)
sendform.Add(&amp;quot;refresh&amp;quot;, &amp;quot;true&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;创建http请求，设置请求头相关数据&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;reqest, err := http.NewRequest(&amp;quot;POST&amp;quot;,URL, strings.NewReader(sendform.Encode()))
if err != nil {
    fmt.Println(&amp;quot;Fatal error &amp;quot;, err.Error())
    return false
}
reqest.Header.Set(&amp;quot;Content-Type&amp;quot;, &amp;quot;application/x-www-form-urlencoded&amp;quot;)
reqest.Header.Set(&amp;quot;Content-Length&amp;quot;, &amp;quot;202&amp;quot;)
reqest.Header.Set(&amp;quot;Accept&amp;quot;, &amp;quot;*/*&amp;quot;)
reqest.Header.Set(&amp;quot;Accept-Encoding&amp;quot;, &amp;quot;gzip, deflate&amp;quot;)
reqest.Header.Set(&amp;quot;Accept-Language&amp;quot;, &amp;quot;zh-CN,zh;q=0.8,en;q=0.6&amp;quot;)
reqest.Header.Set(&amp;quot;Connection&amp;quot;, &amp;quot;keep-alive&amp;quot;)
reqest.Header.Set(&amp;quot;Host&amp;quot;, &amp;quot;spcss.xxxxxx.com:2008&amp;quot;)
reqest.Header.Set(&amp;quot;Origin&amp;quot;, &amp;quot;http://spcss.xxxxx.com:2008&amp;quot;)
reqest.Header.Set(&amp;quot;Referer&amp;quot;, &amp;quot;http://spcss.xxxxx.com:2008/cqweb/&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;执行请求，cookies相关数据也自动保存在client中。处理response数据&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gCookieJar, _ = cookiejar.New(nil)
CLIENT= &amp;amp;http.Client{
    CheckRedirect: nil,
    Jar:   gCookieJar}
response, err := CLIENT.Do(reqest)
defer response.Body.Close()
if err != nil {
    fmt.Println(&amp;quot;Fatal error &amp;quot;, err.Error())
    return false
}
if response.StatusCode == 200 {
    //get response
} else {
    fmt.Println(&amp;quot;server err:&amp;quot;, response.StatusCode)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>golang的应用--工作工具</title>
      <link>https://hulkxu.github.io/post/golang/golang_worktool/</link>
      <pubDate>Mon, 09 May 2016 16:57:54 +0800</pubDate>
      
      <guid>https://hulkxu.github.io/post/golang/golang_worktool/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;日常工作中一些重复的工作做成工具比较方便，而且更有效率。在之前工作中都是用python做，python语言简单，一些开源库也多，简单迅速。但当这些工具给到别人时就比较麻烦，必须注明依赖的python版本，要安装哪些包才能最后成功运行。当了解到golang的优点后，尝试用golang来制作这些工具。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;批量bug导入:9e88b0463a278732711ab851a4acb3d9&#34;&gt;批量Bug导入&lt;/h2&gt;

&lt;p&gt;Bugzilla系统可以通过&lt;a href=&#34;https://en.wikipedia.org/wiki/XML-RPC&#34;&gt;XML-RPC&lt;/a&gt;协议将bug提交到系统中。golang中没有XML-RPC的库，所以只有寻找相关开源代码。从Github中找到&lt;a href=&#34;https://github.com/kolo/xmlrpc&#34;&gt;xmlrpc库&lt;/a&gt;。由于需要批量导入，所以可以将bug统一收集到excel中，最后读取excel文件将所有bug导入。找到处理excel的开源库：&lt;a href=&#34;https://github.com/tealeg/xlsx&#34;&gt;xlsx&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;bug的struct定义&lt;/strong&gt;：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;type Bugparams struct {
    Productstring   `xmlrpc:&amp;quot;product&amp;quot;`
    Component  string   `xmlrpc:&amp;quot;component&amp;quot;`
    Summarystring   `xmlrpc:&amp;quot;summary&amp;quot;`
    Cf_base_on_ver string   `xmlrpc:&amp;quot;cf_base_on_ver&amp;quot;`
    Descriptionstring   `xmlrpc:&amp;quot;description&amp;quot;`
    Cf_change_type string   `xmlrpc:&amp;quot;cf_change_type&amp;quot;`
    Cf_come_from   string   `xmlrpc:&amp;quot;cf_come_from&amp;quot;`
    Cf_probability string   `xmlrpc:&amp;quot;cf_probability&amp;quot;`
    Cf_occurence_count string   `xmlrpc:&amp;quot;cf_occurence_count&amp;quot;`
    Severity   string   `xmlrpc:&amp;quot;severity&amp;quot;`
    Versionstring   `xmlrpc:&amp;quot;version&amp;quot;`
    Priority   string   `xmlrpc:&amp;quot;priority&amp;quot;`
    Groups []string `xmlrpc:&amp;quot;groups&amp;quot;`
    Api_keystring   `xmlrpc:&amp;quot;api_key&amp;quot;`
} 
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;注意这里的需要使用struct的TAG，以作为xml的成员名称。&lt;/li&gt;
&lt;li&gt;API key的值是bugzilla系统给出的APK Key，每个用户独一无二的。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;同时需要定义导入结果&lt;/strong&gt;：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;result := struct {
    Response int `xmlrpc:&amp;quot;id&amp;quot;`
}{}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;这里id为导入后的在bugzilla系统中的ID值。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;导入过程&lt;/strong&gt;：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;client, _ := xmlrpc.NewClient(URL, nil)

for e := buglist.Front(); e != nil; e = e.Next() {
    bug := e.Value.(*Bugparams)
    restatus := client.Call(&amp;quot;Bug.create&amp;quot;, bug, &amp;amp;result)
    if restatus != nil {
        fmt.Println(restatus.Error())
        break
    } else {
        idlist.PushBack(result.Response)
        fmt.Printf(&amp;quot;bugzilla id: %d ：%s \n&amp;quot;, result.Response, bug.Summary)
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>golang的面向对象编程特性</title>
      <link>https://hulkxu.github.io/post/golang/Golang_object-oriented_thinking_and_Implementation/</link>
      <pubDate>Wed, 04 May 2016 14:35:50 +0800</pubDate>
      
      <guid>https://hulkxu.github.io/post/golang/Golang_object-oriented_thinking_and_Implementation/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;golang也可以实现面向对象编程。主要是通过struct和interface来实现的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;继承:132e4b9b48dc618261cb0fdc11cb083c&#34;&gt;继承&lt;/h2&gt;

&lt;p&gt;继承在golang上称为组合（composition）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;type Drugweb struct {
    Webopration   IWebOpration
    webclient *http.Client
    Webname   string
    WebAppIdSearchUrl string
    WebKeySearchUrl   string
    WebUrlPrefix  string
    tagslist  []string
    unusetaglist  []string
}

type BaidujkWeb struct {
    Drugweb
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;这里在BaidujkWeb里声明了Drugweb,表示组合（继承）了Drugweb的属性和方法。可以直接操作Drugweb的属性和方法。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果BaidjkWeb也有Drugweb相同的属性和方法。比如:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;baidujk := new(BaidujkWeb)
//若BaidujkWeb也有Webname属性，则这里是操作BaidujkWeb的属性
//若BaidujkWeb没有Webname属性，则这里操作Drugweb的属性
baidujk.Webname = &amp;quot;baidu&amp;quot;

//也可以直接指定操作Drugweb属性
baidujk.Drugweb.webname = &amp;quot;baidu&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;方法重载:132e4b9b48dc618261cb0fdc11cb083c&#34;&gt;方法重载&lt;/h2&gt;

&lt;p&gt;golang不支持重载，会报redeclared错误，但我们可以使用不定参数的函数来替换。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func (Drugweb *web) recite(v ...interface{}) {
    fmt.Println(v)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;接口interface:132e4b9b48dc618261cb0fdc11cb083c&#34;&gt;接口interface&lt;/h2&gt;

&lt;p&gt;接口是一个或多个方法签名的集合，任何类型的方法集中只要拥有与之对应的全部方法，
就表示它&amp;rdquo;实现&amp;rdquo;了该接口无须在该类型上显式添加接口声明。&lt;/p&gt;

&lt;p&gt;所谓对应方法，是指有相同名称、参数列表 (不包括参数名) 以及返回值。当然，该类型还可以有其他方法。&lt;/p&gt;

&lt;p&gt;比如一个web若要有一些操作，可以定义接口为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;type IWebOpration interface {
    InitDrugweb() *Drugweb
    GetHttpRequest(weburl string) *http.Request
    PaserItemHtmlBody(bodystring string) *druginfo.DrugInfo
    PaserApproveIdSearchResultHtmlBody(bodystring string) string
    PaserKeywordsSearchResultHtmlBody(bodystring string) string
    GetSearchUrlWithApproveId(appid string) string
    GetSearchUrlWithKeywords(keywords []string) string
}

func GetWebSourceListSupportItemurl() []IWebOpration {
    weblist := make([]IWebOpration, 0)
    //这里BaidujkWeb,Yao360Web等实现了IWebOpration方法
    weblist = append(weblist, new(BaidujkWeb))
    weblist = append(weblist, new(Yao360Web))
    weblist = append(weblist, new(Kad360Web))
    weblist = append(weblist, new(JiankeWeb))
    return weblist
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>hugo创建个人Blog网站</title>
      <link>https://hulkxu.github.io/post/golang/hugotest/</link>
      <pubDate>Tue, 03 May 2016 14:35:50 +0800</pubDate>
      
      <guid>https://hulkxu.github.io/post/golang/hugotest/</guid>
      <description>

&lt;p&gt;Hugo是一个用Go语言编写的静态网站生成器，它使用起来非常简单。具体分为下面几个步骤：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;用markdown写好文章（不用过分关注文章格式，排版，注重到文章内容。）&lt;/li&gt;
&lt;li&gt;选好theme，执行命令生成静态网页（可以选用不同的theme或者其他相关组件如评论分享等）&lt;/li&gt;
&lt;li&gt;将网页提交到github（无需部署服务器）&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;markdown:347c3bb565fbefc355c0b20330d98136&#34;&gt;Markdown&lt;/h2&gt;

&lt;p&gt;markdown语法见&lt;a href=&#34;http://wowubuntu.com/markdown/&#34;&gt;链接&lt;/a&gt;。这里不多做赘述。&lt;/p&gt;

&lt;h2 id=&#34;hugo:347c3bb565fbefc355c0b20330d98136&#34;&gt;Hugo&lt;/h2&gt;

&lt;p&gt;官方网站见&lt;a href=&#34;http://gohugo.io/&#34;&gt;链接&lt;/a&gt;,中文网站见&lt;a href=&#34;http://www.gohugo.org/&#34;&gt;链接&lt;/a&gt;
相关文档已经非常清楚，这里主要说下自己在使用过程中遇到的一些问题：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;theme选择为&lt;a href=&#34;https://github.com/tanksuzuki/angels-ladder&#34;&gt;angels-ladder&lt;/a&gt;，设计简单，支持tag,支持代码高亮，支持disqus评论。&lt;/li&gt;
&lt;li&gt;设置disqus为中文:进入disqus网站设置界面 “Configure Disqus for Your Site”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://hulkxu.github.io/media/disqus.set_chinese.PNG&#34; alt=&#34;Alt text&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Android获取图片缩略图导致libskia crash</title>
      <link>https://hulkxu.github.io/post/golang/android_libskia_crash/</link>
      <pubDate>Fri, 15 Aug 2014 16:57:54 +0800</pubDate>
      
      <guid>https://hulkxu.github.io/post/golang/android_libskia_crash/</guid>
      <description>

&lt;p&gt;最近项目中Camera2模块很多关于libskia库的native crash。Camera模块中用到libskia库的主要有图片解析（通过bitmap），获取缩略图（通过Images.Thumbnails.getThumbnail），从调用栈看与getThrumbnail相关。&lt;/p&gt;

&lt;h2 id=&#34;android的两种缩略图:8bb097f1e14e3d40ac6965d7d7aac5df&#34;&gt;Android的两种缩略图&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;MICRO_KIND（比较小，大小只有10000byte），直接将jpeg数据存储在一个可以randomAccess的文件上，randomAccessFile在存储路径下的
/DCIM/.thumbnails下的一个文件,见下面代码&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class MiniThumbFile {
    private String randomAccessFilePath(int version) {
        String directoryName = 
        Environment.getExternalStorageDirectory().toString()+ &amp;quot;/DCIM/.thumbnails&amp;quot;;
        return directoryName + &amp;quot;/.thumbdata&amp;quot; + version + &amp;quot;-&amp;quot; + mUri.hashCode();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;MINI_KIND （比较大，长宽不大于512 * 384），从图片EXIF或者直接decode原图得到。见ThumbnailUtils.createImageThumbnail方法。
同样存储在/DCIM/.thumbnails目录下。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://hulkxu.github.io/media/two_thumbnail.png&#34; alt=&#34;缩略图&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;MICRO_KIND 通过原图数据表中的MINI_THUMB_MAGIC字段来查询。MINI_KIND通过缩略图表来存储，通过id与原图关联。如下图&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://hulkxu.github.io/media/mircothumb_database.png&#34; alt=&#34;MICRO_KIND&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://hulkxu.github.io/media/minithumb_database.png&#34; alt=&#34;MINI_KIND&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;android生成图片缩略图的过程:8bb097f1e14e3d40ac6965d7d7aac5df&#34;&gt;Android生成图片缩略图的过程&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;首先MediaProvider插入图片到数据库时并不立即生成缩略图&lt;/li&gt;

&lt;li&gt;&lt;p&gt;当通过获取Images.Thumbnails.getThumbnail获取缩略图时，首先判断randomAccessFile是否已生成过缩略图。如果已生成缩略图，则直接查询。（MediaStore.java的Images.Thumbnails.getThumbnail方法）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;MiniThumbFile thumbFile = new MiniThumbFile(isVideo ? 
    Video.Media.EXTERNAL_CONTENT_URI: Images.Media.EXTERNAL_CONTENT_URI);
long magic = thumbFile.getMagic(origId);
if (magic != 0) {
    if (kind == MICRO_KIND) {
        synchronized (sThumbBufLock) {
        //get bitmap data from randomAcessFile
        if (thumbFile.getMiniThumbFromFile(origId, sThumbBuf) != null) {
            bitmap = BitmapFactory.decodeByteArray(sThumbBuf, 0, sThumbBuf.length);
        }
    }
    return bitmap;
    } else if (kind == MINI_KIND) {
        String column = isVideo ? &amp;quot;video_id=&amp;quot; : &amp;quot;image_id=&amp;quot;;
        //query thumbnail id
        c = cr.query(baseUri, PROJECTION, column + origId, null, null);
        if (c != null &amp;amp;&amp;amp; c.moveToFirst()) {
            // get bitmap from thumbnail jpeg file
            bitmap = getMiniThumbFromFile(c, baseUri, cr, options);
            if (bitmap != null) {
            return bitmap;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;这里baseUri为缩略图Uri:content://media/external/images/thumbnails&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;若未生成过缩略图，则需要先通过query查询操作来生成缩略图:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Uri blockingUri = baseUri.buildUpon().appendQueryParameter(&amp;quot;blocking&amp;quot;, &amp;quot;1&amp;quot;)
.appendQueryParameter(&amp;quot;orig_id&amp;quot;, String.valueOf(origId))
.appendQueryParameter(&amp;quot;group_id&amp;quot;, String.valueOf(groupId)).build();
c = cr.query(blockingUri, PROJECTION, null, null, null);
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;查询操作对应MediaProvider的queryThumbnail，waitForThumbnailReady方法。会首先查询原始图片的id,文件路径，然后生成MediaThumbRequest发送给thumbs thread执行。下面来看MediaThumbRequest的执行过程（MediaThumbRequest.java）;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;void execute() throws IOException {
    //.....
    Bitmap bitmap = null;
    if (mPath != null) {
        //这里mPath为原始图片路径，生成大jpeg缩略图
        bitmap = ThumbnailUtils.createImageThumbnail(mPath,
                    Images.Thumbnails.MINI_KIND);
        //这里是重点，先向数据库中插入记录，再保存数据到文件中！
        Uri uri = updateDatabase(bitmap);
        if (uri != null) {
            OutputStream thumbOut = mCr.openOutputStream(uri);
            bitmap.compress(Bitmap.CompressFormat.JPEG, 85, thumbOut);
            thumbOut.close();
        }
    }
    //接下来生成小缩略图，先将bitmap裁剪到合适大小
    bitmap = ThumbnailUtils.extractThumbnail(bitmap,
          ThumbnailUtils.TARGET_SIZE_MICRO_THUMBNAIL,
          ThumbnailUtils.TARGET_SIZE_MICRO_THUMBNAIL,
          ThumbnailUtils.OPTIONS_RECYCLE_INPUT);
    bitmap.compress(Bitmap.CompressFormat.JPEG, 75, miniOutStream);
    data = miniOutStream.toByteArray();
    magic = sRandom.nextLong();
    //将数据直接保存到randomAccessFile中，magic是地址
    miniThumbFile.saveMiniThumbToFile(data, mOrigId, magic);
    ContentValues values = new ContentValues();
    //然后将magic地址更新到原始图片的MINI_THUMB_MAGIC字段中
    values.put(ImageColumns.MINI_THUMB_MAGIC, magic);
    mCr.update(mUri, values, null, null);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;至此缩略图都已生成完毕。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;libjpeg-crash的原因:8bb097f1e14e3d40ac6965d7d7aac5df&#34;&gt;libjpeg crash的原因&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; signal 7 (SIGBUS), code 2 (BUS_ADRERR), fault addr 554ec000
#00  pc 00022058  /system/lib/libc.so (__memcpy_base+60)
#01  pc 000c6dc9  /system/lib/libskia.so (SkMemoryStream::read(void*, unsigned int)+28)
#02  pc 000f045d  /system/lib/libskia.so
#03  pc 0001c4e4  /system/lib/libjpeg.so (jpeg_fill_bit_buffer+108)
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;问题的根本原因是保存大缩略图时是先插入数据库数据，再保存实际文件数据。当有多个线程在同时调用Images.Thumbnails.getThumbnail方法时就会导致该问题，如下图：
&lt;img src=&#34;https://hulkxu.github.io/media/multi_task_getthumbnail.png&#34; alt=&#34;调用流程图&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;解决方案:8bb097f1e14e3d40ac6965d7d7aac5df&#34;&gt;解决方案&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Images.Thumbnails.getThumbnail的查询query接口加上保护锁。&lt;/li&gt;
&lt;li&gt;MediaThumbRequest 中先进行jpeg数据的保存再进行数据库的更新。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;第一种方案修改比较方便，最后修改如下，问题也解决，crash未再复现。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;--- a/core/java/android/provider/MediaStore.java
+++ b/core/java/android/provider/MediaStore.java
@@ -541,6 +541,7 @@ public final class MediaStore {
         private static final Object sThumbBufLock = new Object();
         private static byte[] sThumbBuf;

       + private static final Object sThumbLock = new Object();

@@ -645,7 +646,9 @@ public final class MediaStore {
           if (c != null) c.close();
       -   c = cr.query(blockingUri, PROJECTION, null, null, null);
       +   synchronized (sThumbLock) {
       +        c = cr.query(blockingUri, PROJECTION, null, null, null);
       +   }
           // This happens when original image/video doesn&#39;t exist.
           if (c == null) return null;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>